// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using patient.infrastructure.Percistence.PersistenceModel;

#nullable disable

namespace patient.infrastructure.Migrations
{
    [DbContext(typeof(PersistenceDbContext))]
    [Migration("20251018055159_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.BackgroundPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BackgroundId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("HistoryId");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Background");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.ContactPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ContactId");

                    b.Property<string>("Coords")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Coords");

                    b.Property<string>("Direction")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Direction");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Floor");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("PatientId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Reference")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Reference");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.EvolutionPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("EvolutionId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Description");

                    b.Property<Guid>("HistoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("HistoryId");

                    b.Property<string>("MedicOrder")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("MedicOrder");

                    b.Property<string>("Observations")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Observations");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("RegisterDate");

                    b.HasKey("Id");

                    b.HasIndex("HistoryId");

                    b.ToTable("Evolution");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.FoodPlanPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("FoodPlanId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("FoodPlan");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.HistoryPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("HistoryId");

                    b.Property<string>("Diagnostic")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Diagnostic");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("EntryDate");

                    b.Property<Guid>("FoodPlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("FoodPlanId");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid")
                        .HasColumnName("PatientId");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Reason");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("Treatment");

                    b.HasKey("Id");

                    b.HasIndex("FoodPlanId");

                    b.HasIndex("PatientId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.PatientPM", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("PatientId");

                    b.Property<string>("Alergies")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Alergies");

                    b.Property<int>("BloodType")
                        .HasColumnType("integer")
                        .HasColumnName("BloodType");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("DocumentNumber");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("LastName");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("MiddleName");

                    b.Property<string>("Ocupation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Ocupation");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Religion");

                    b.HasKey("Id");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.BackgroundPM", b =>
                {
                    b.HasOne("patient.infrastructure.Percistence.PersistenceModel.Entities.HistoryPM", "History")
                        .WithMany("Backgrounds")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.ContactPM", b =>
                {
                    b.HasOne("patient.infrastructure.Percistence.PersistenceModel.Entities.PatientPM", "Patient")
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.EvolutionPM", b =>
                {
                    b.HasOne("patient.infrastructure.Percistence.PersistenceModel.Entities.HistoryPM", "History")
                        .WithMany("Evolutions")
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("History");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.HistoryPM", b =>
                {
                    b.HasOne("patient.infrastructure.Percistence.PersistenceModel.Entities.FoodPlanPM", "FoodPlan")
                        .WithMany()
                        .HasForeignKey("FoodPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("patient.infrastructure.Percistence.PersistenceModel.Entities.PatientPM", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodPlan");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.HistoryPM", b =>
                {
                    b.Navigation("Backgrounds");

                    b.Navigation("Evolutions");
                });

            modelBuilder.Entity("patient.infrastructure.Percistence.PersistenceModel.Entities.PatientPM", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
